/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.JTextComponent;

import Model.DAO;
import Model.RSA_Algorithm;
import Model.SHA512_Hashing;

/**
 *
 * @author DELL
 */
public class Main extends JFrame {

    /**
     * Creates new form NewJFrame
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        parent = new javax.swing.JPanel();
        aboutSP = new javax.swing.JScrollPane();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextPane2 = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel9 = new javax.swing.JLabel();
        jTextPane3 = new javax.swing.JTextPane();
        jLabel7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextPane4 = new javax.swing.JTextPane();
        jLabel11 = new javax.swing.JLabel();
        jTextPane5 = new javax.swing.JTextPane();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jTextPane6 = new javax.swing.JTextPane();
        jLabel16 = new javax.swing.JLabel();
        jTextPane7 = new javax.swing.JTextPane();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jTextPane8 = new javax.swing.JTextPane();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jTextPane10 = new javax.swing.JTextPane();
        jLabel26 = new javax.swing.JLabel();
        jTextPane11 = new javax.swing.JTextPane();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jTextPane9 = new javax.swing.JTextPane();
        rsaPanel = new javax.swing.JPanel();
        vigenereTitle1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel33 = new javax.swing.JLabel();
        createKeyBtn = new javax.swing.JButton();
        exportBillAfterSignBtn = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        keyLb1 = new javax.swing.JLabel();
        publickeyField = new javax.swing.JTextField();
        importPubBtn = new javax.swing.JButton();
        exportPubBtn = new javax.swing.JButton();
        alphabetLb3 = new javax.swing.JLabel();
        privatekeyField = new javax.swing.JTextField();
        importPriBtn = new javax.swing.JButton();
        exportPriBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        inputPathField = new javax.swing.JTextField();
        chooseBillPathBtn = new javax.swing.JButton();
        signBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        billAfterSignArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        aboutMenu = new javax.swing.JMenu();
        digitalSignatureMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Encryption & Decryption Tools");
        setIconImages(null);
        setLocation(new java.awt.Point(200, 100));
        setMinimumSize(new java.awt.Dimension(1200, 600));
        setResizable(false);

        parent.setAlignmentX(0.0F);
        parent.setAlignmentY(0.0F);
        parent.setMaximumSize(new java.awt.Dimension(1000, 570));
        parent.setPreferredSize(new java.awt.Dimension(1200, 570));
        parent.setLayout(new java.awt.CardLayout());

        aboutSP.setBorder(null);
        aboutSP.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        aboutSP.setAlignmentX(0.0F);
        aboutSP.setAlignmentY(0.0F);
        aboutSP.setPreferredSize(new java.awt.Dimension(1200, 55));

        jPanel8.setMinimumSize(new java.awt.Dimension(1000, 2000));
        jPanel8.setPreferredSize(new java.awt.Dimension(900, 2550));
        jPanel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel8MouseClicked(evt);
            }
        });

        jPanel9.setPreferredSize(new java.awt.Dimension(800, 2550));
        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel3.setText("Crypto tools");
        jLabel3.setPreferredSize(new java.awt.Dimension(880, 22));
        jPanel9.add(jLabel3);

        jTextPane2.setEditable(false);
        jTextPane2.setBorder(null);
        jTextPane2.setText("This app can help the user encrypt and decrypt simple paragraph or a file text by some Asymmetric or Symmetric Algorithms. In addition, the user could use hashing function by Hashing Algorithms to check or create code for their text or file. This app use Java and Netbeans IDE for development. Please read the introduction document of this app by clicking the link bellow: ");
        jTextPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextPane2.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextPane2.setEnabled(false);
        jTextPane2.setPreferredSize(new java.awt.Dimension(890, 50));
        jTextPane2.setRequestFocusEnabled(false);
        jPanel9.add(jTextPane2);

        jLabel4.setForeground(new java.awt.Color(0, 153, 255));
        jLabel4.setText("https://docs.google.com/document/d/1Y2ITvmS79On7EJEmRA6csEF8zDwarO9AoDGmR_0W8B0/edit?usp=sharing");
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel4.setPreferredSize(new java.awt.Dimension(890, 22));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });
        jPanel9.add(jLabel4);

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel5.setText("List of Algorithms");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel5.setPreferredSize(new java.awt.Dimension(890, 22));
        jPanel9.add(jLabel5);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Vigenere Cipher");
        jLabel6.setPreferredSize(new java.awt.Dimension(890, 22));
        jPanel9.add(jLabel6);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 51, 255));
        jLabel1.setText("How to encrypt using Vigenere cipher?");
        jLabel1.setPreferredSize(new java.awt.Dimension(890, 22));
        jPanel9.add(jLabel1);

        jTextPane1.setEditable(false);
        jTextPane1.setBorder(null);
        jTextPane1.setText("Encryption with Vigenere uses a key made of letters (and an alphabet). There are several ways to achieve the ciphering manually:\nVigenere Ciphering by adding letters\nIn order to cipher a text, take the first letter of the message and the first letter of the key, add their value (letters have a value depending on their rank in the alphabet, starting with 0). The result of the addition modulo 26 (26=the number of letter in the alphabet) gives the rank of the ciphered letter.\nExample: To crypt DCODE, the key is KEY and the alphabet is ABCDEFGHIJKLMNOPQRSTUVWXYZ.\nExample: Take the first letters of the plaintext D (value = 3) and of the key K (value = 10) and add them (3+10=13), the letter with value 13 is N.\nContinue with the next letter of the plaintext, and the next letter of the key. When arrived at the end of the key, go back to the first letter of the key.\nExample: DCODE\nKEYKE\nExample: NGMNI is the ciphertext.\nVigenere Cipher using a table\nIn order to encrypt using Vigenere method, the easiest way is to have a double entry grid, here is one (when the alphabet is ABCDEFGHIJKLMNOPQRSTUVWXYZ)\nExample: The key is KEY, and the plaintext is DCODE.\nLocate the first letter of the plaintext message in the first line of the table and the first letter of the key on the left column. The cipher letter is at the intersection.\nExample: Locate the letter D on the first row, and the letter K on the first column, the ciphered letter is the intersection cell N.\nContinue with the next letter of the plaintext, and the next letter of the key. When arrived at the end of the key, go back to the first letter of the key.\nExample: NGMNI is the ciphertext.");
        jTextPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextPane1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextPane1.setEnabled(false);
        jTextPane1.setPreferredSize(new java.awt.Dimension(890, 280));
        jTextPane1.setRequestFocusEnabled(false);
        jPanel9.add(jTextPane1);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(204, 51, 255));
        jLabel9.setText("How to decrypt Vigenere cipher?");
        jLabel9.setPreferredSize(new java.awt.Dimension(890, 22));
        jPanel9.add(jLabel9);

        jTextPane3.setEditable(false);
        jTextPane3.setBorder(null);
        jTextPane3.setText("Vigenere decryption requires a key (and an alphabet). As for encryption, two ways are possible.\nDecryption of Vigenere by subtracting letters\nExample: To decrypt NGMNI, the key is KEY and the alphabet is ABCDEFGHIJKLMNOPQRSTUVWXYZ.\nTo decrypt, take the first letter of the ciphertext and the first letter of the key, and subtract their value (letters have a value equal to their position in the alphabet starting from 0). If the result is negative, add 26 (26=the number of letters in the alphabet), the result gives the rank of the plain letter.\nExample: Take the first letters of the ciphertext N (value = 13) and the key K (value = 10) and subtract them (13-10=3), the letter of value 3 is D.\nContinue with the next letters of the message and the next letters of the key, when arrived at the end of the key, go back the the first key of the key.\nExample: NGMNI\nKEYKE\nExample: DCODE is the plain text.\nDecryption of Vigenere with a table\nTo decrypt Vigenere with a double entry square table, use the following grid (case alphabet is ABCDEFGHIJKLMNOPQRSTUVWXYZ)\nExample: To decrypt NGMNI, the key is KEY.\nLocates the first letter of the key in the left column, and locates on the row the first letter of the ciphered message. Then go up in the column to read the first letter, it is the corresponding plain letter.\nExample: Locate the letter K on the first column, and on the row of it, find the cell of the letter N, the name of its column is D, it is the first letter of the plain message.\nContinue with the next letters of the message and the next letters of the key, when arrived at the end of the key, go back the the first key of the key.\nExample: The original plain text is DCODE.");
        jTextPane3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextPane3.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextPane3.setEnabled(false);
        jTextPane3.setPreferredSize(new java.awt.Dimension(890, 290));
        jTextPane3.setRequestFocusEnabled(false);
        jPanel9.add(jTextPane3);

        jLabel7.setText("Study more about this algoritm:");
        jLabel7.setPreferredSize(new java.awt.Dimension(180, 22));
        jPanel9.add(jLabel7);

        jLabel2.setForeground(new java.awt.Color(0, 153, 255));
        jLabel2.setText("https://www.dcode.fr/vigenere-cipher");
        jLabel2.setPreferredSize(new java.awt.Dimension(550, 16));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        jPanel9.add(jLabel2);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Affine Cipher");
        jLabel8.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel8.setPreferredSize(new java.awt.Dimension(890, 30));
        jPanel9.add(jLabel8);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(204, 51, 255));
        jLabel10.setText("How to encrypt using the Affine cipher?");
        jLabel10.setPreferredSize(new java.awt.Dimension(890, 22));
        jPanel9.add(jLabel10);

        jTextPane4.setEditable(false);
        jTextPane4.setBorder(null);
        jTextPane4.setText("Encryption uses a classic alphabet, and two integers, called coefficients or keys A and B, these are the parameters of the affine function Ax+B.\nExample: Encrypt DCODE with the keys A=5, B=3 and the English/latin alphabet ABCDEFGHIJKLMNOPQRSTUVWXYZ.\nFor each letter of the alphabet is associated to the value of its position in the alphabet (starting at 0).\nExample: By default, A=0, B=1, …, Z=25, but it is possible (but not recommended) to use A=1, …, Y=25, Z=0 using the alphabet ZABCDEFGHIJKLMNOPQRSTUVWXY.\nFor each letter of value x of the plain text, is associated a value y, result of the affine function \ny = A × x +B mod 26 (with 26 the alphabet size). \nEach computed value y corresponds to a letter with the same position in the alphabet, it is the ciphered letter. The Affine ciphertext is the replacement of all the letters by the new ones.\nExample: DCODE is crypted SNVSX: D -> x = 3, A = 5, B = 3 --> 5 x 3 + 3 = 18 -> D = S");
        jTextPane4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextPane4.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextPane4.setEnabled(false);
        jTextPane4.setPreferredSize(new java.awt.Dimension(890, 170));
        jTextPane4.setRequestFocusEnabled(false);
        jPanel9.add(jTextPane4);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(204, 51, 255));
        jLabel11.setText("How to decrypt Vigenere cipher?");
        jLabel11.setPreferredSize(new java.awt.Dimension(890, 22));
        jPanel9.add(jLabel11);

        jTextPane5.setEditable(false);
        jTextPane5.setBorder(null);
        jTextPane5.setText("Affine decryption requires to know the two keys A and B (the one from encryption) and the used alphabet.\nExample: Decrypt the ciphered message SNVSX with keys A=5 and B=3\nFor each letter of the alphabet, associate the value of its position in the alphabet.\nExample: The alphabet ABCDEFGHIJKLMNOPQRSTUVWXYZ, starting at 0 gives A=0, B=1, …, Z=25.\nEach letter of value y of the message corresponds to a value x, result of the inverse function x = A′ × (y − B) mod 26 (with 26 the alphabet size)\nThe value A′ is an integer such as A × A′ = 1 mod 26 (with 26 the alphabet size). To find A′, calculate its modular inverse.\nExample: A coefficient A′ for  A = 5 with an alphabet size of 26 is 21 because 5 × 21 = 105 ≡ 1 mod 26.\nFor S ( y = 18 ), \nx = A′ × (18 − B) = 21 × (18 − 3) ≡ 315 mod 26 = 3\nFor each value x, associate the letter with the same position in the alphabet: the coded letter. The plain text is the replacement of all characters with calculated new letters.\nExample: For S ( x=3 ) associate the letter at position 3: D, etc. The original plain text is DCODE.");
        jTextPane5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextPane5.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextPane5.setEnabled(false);
        jTextPane5.setPreferredSize(new java.awt.Dimension(890, 200));
        jTextPane5.setRequestFocusEnabled(false);
        jPanel9.add(jTextPane5);

        jLabel12.setText("Study more about this algoritm:");
        jLabel12.setPreferredSize(new java.awt.Dimension(180, 22));
        jPanel9.add(jLabel12);

        jLabel13.setForeground(new java.awt.Color(0, 153, 255));
        jLabel13.setText("https://www.dcode.fr/affine-cipher");
        jLabel13.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel13.setPreferredSize(new java.awt.Dimension(550, 16));
        jLabel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel13MouseClicked(evt);
            }
        });
        jPanel9.add(jLabel13);

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("Hill Cipher");
        jLabel14.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel14.setPreferredSize(new java.awt.Dimension(890, 30));
        jPanel9.add(jLabel14);

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(204, 51, 255));
        jLabel15.setText("How to encrypt using the Hill cipher?");
        jLabel15.setPreferredSize(new java.awt.Dimension(890, 22));
        jPanel9.add(jLabel15);

        jTextPane6.setEditable(false);
        jTextPane6.setBorder(null);
        jTextPane6.setText("Hill cipher encryption uses an alphabet and a square matrix M of size n made up of integers numbers and called encryption matrix.\nExample: Encrypt the plain text DCODE with the latin alphabet ABCDEFGHIJKLMNOPQRSTUVWXYZ and the matrix M (size 2):\nM = [2  3\n         5  7]\nSplit the text into n-grams. Complete any final incomplete ngrams with random letters if necessary.\nExample: The matrix M is a 2x2 matrix, DCODE, split in 2-grams, becomes DC,OD,EZ (Z letter has been added to complete the last bigram)\nSubstitute the letters of the plain message by a value: their rank in the alphabet starting from 0.\nExample: The alphabet ABCDEFGHIJKLMNOPQRSTUVWXYZ leads to A=0,B=1,…,Z=25.\nGroups of letters DC, OD, EZ become the groups of values (3,2), (14,3), (4,25)\n**It is possible (but not recommended) to use ZABCDEFGHIJKLMNOPQRSTUVWXY in order to get A=1,B=2,…Y=25,Z=0.\nFor each group of values P of the plain text (mathematically equivalent to a vector of size n), compute the multiplication\">matrix product:\n\tM . P ≡ C mod 26\nwhere C is the calculated vector (a group) of ciphered values and 26 the alphabet length.\nExample:\n[ 2  3            . [3               ≡ [12         mod 26\n  5  7 ]             2]                    3 ]\nFrom cipher values C, retrieve cipher letters of the same rank in the alphabet.\nExample: 12 is equal to M and 3 is equal to D.\nAnd so on, DCODEZ is encrypted MDLNFN.");
        jTextPane6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextPane6.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextPane6.setEnabled(false);
        jTextPane6.setPreferredSize(new java.awt.Dimension(890, 310));
        jTextPane6.setRequestFocusEnabled(false);
        jPanel9.add(jTextPane6);

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(204, 51, 255));
        jLabel16.setText("How to decrypt Hill cipher?");
        jLabel16.setPreferredSize(new java.awt.Dimension(890, 22));
        jPanel9.add(jLabel16);

        jTextPane7.setEditable(false);
        jTextPane7.setBorder(null);
        jTextPane7.setText("Hill cipher decryption needs the matrix and the alphabet used. Decryption involves matrix computations such as matrix inversion, and arithmetic calculations such as modular inverse.\nTo decrypt hill ciphertext, compute the matrix inverse modulo 26 (where 26 is the alphabet length), requiring the matrix to be invertible.\nExample: Using the example matrix, compute the inverse matrix (modulo 26) :\n[ 2  3  ^−1     ≡   [-7   3     ≡   [19   3       mod 26\n  5  7]                     5   -2]           5    24]\nDecryption consists in encrypting the ciphertext with the inverse matrix.\nNote that not all matrices can be adapted to hill cipher. The determinant of the matrix has to be coprime with 26. For a 2x2 matrix, the 4 numbers {a,b,c,d} must satisfy the condition that ad−bc is coprime with 26.");
        jTextPane7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextPane7.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextPane7.setEnabled(false);
        jTextPane7.setPreferredSize(new java.awt.Dimension(890, 150));
        jTextPane7.setRequestFocusEnabled(false);
        jPanel9.add(jTextPane7);

        jLabel17.setText("Study more about this algoritm:");
        jLabel17.setPreferredSize(new java.awt.Dimension(180, 22));
        jPanel9.add(jLabel17);

        jLabel18.setForeground(new java.awt.Color(0, 153, 255));
        jLabel18.setText("https://www.dcode.fr/hill-cipher");
        jLabel18.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel18.setPreferredSize(new java.awt.Dimension(550, 16));
        jLabel18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel18MouseClicked(evt);
            }
        });
        jPanel9.add(jLabel18);

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel19.setText("MD5");
        jLabel19.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel19.setPreferredSize(new java.awt.Dimension(890, 30));
        jPanel9.add(jLabel19);

        jLabel20.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(204, 51, 255));
        jLabel20.setText("How to encrypt in MD5?");
        jLabel20.setPreferredSize(new java.awt.Dimension(890, 22));
        jPanel9.add(jLabel20);

        jTextPane8.setEditable(false);
        jTextPane8.setBorder(null);
        jTextPane8.setText("MD5 hash calculates from binary data a numeric footprint of 32 hexadecimal characters. The algorithm uses nonlinear function, here are the 4 main ones:\n\tF(B,C,D)=(B∧C)∨(¬B∧D)\n\tG(B,C,D)=(B∧D)∨(C∧¬D)\n\tH(B,C,D)=B⊕C⊕D\n\tI(B,C,D)=C⊕(B∨¬D)\nExample: dCode is crypted e9837d47b610ee29399831f917791a44 it is not the same hash for dcode (without uppercase) which gives a9d3d129549e80065aa8e109ec40a7c8");
        jTextPane8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextPane8.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextPane8.setEnabled(false);
        jTextPane8.setPreferredSize(new java.awt.Dimension(890, 100));
        jTextPane8.setRequestFocusEnabled(false);
        jPanel9.add(jTextPane8);

        jLabel21.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(204, 51, 255));
        jLabel21.setText("How to decrypt MD5 cipher?");
        jLabel21.setPreferredSize(new java.awt.Dimension(890, 22));
        jPanel9.add(jLabel21);

        jLabel22.setText("Study more about this algoritm:");
        jLabel22.setPreferredSize(new java.awt.Dimension(180, 22));
        jPanel9.add(jLabel22);

        jLabel23.setForeground(new java.awt.Color(0, 153, 255));
        jLabel23.setText("https://www.dcode.fr/md5-hash");
        jLabel23.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel23.setPreferredSize(new java.awt.Dimension(550, 16));
        jLabel23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel23MouseClicked(evt);
            }
        });
        jPanel9.add(jLabel23);

        jLabel24.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel24.setText("SHA-1");
        jLabel24.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel24.setPreferredSize(new java.awt.Dimension(890, 30));
        jPanel9.add(jLabel24);

        jLabel25.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(204, 51, 255));
        jLabel25.setText("How to encrypt using Secure Hash Algorithm (SHA-1) ?");
        jLabel25.setPreferredSize(new java.awt.Dimension(890, 22));
        jPanel9.add(jLabel25);

        jTextPane10.setEditable(false);
        jTextPane10.setBorder(null);
        jTextPane10.setText("Encryption calculates a numeric footprint of 40 hexadecimal characters. The algorithm uses non linear functions, here are the 3 main ones:\n\tC(x,y,z)=(x∧y)∨(¬x∧z)\n\tP(x,y,z)=x⊕y⊕z\n\tM(x,y,z)=(x∧y)∨(x∧z)\nWith x,y,z portions of string to encode or fixed values among 0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0 (and others)\nExample: dCode is encrypted with the footprint 15fc6eed5ed024bfb86c4130f998dde437f528ee.");
        jTextPane10.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextPane10.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextPane10.setEnabled(false);
        jTextPane10.setPreferredSize(new java.awt.Dimension(890, 100));
        jTextPane10.setRequestFocusEnabled(false);
        jPanel9.add(jTextPane10);

        jLabel26.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(204, 51, 255));
        jLabel26.setText("How to decrypt a SHA-1 hash?");
        jLabel26.setPreferredSize(new java.awt.Dimension(890, 22));
        jPanel9.add(jLabel26);

        jTextPane11.setEditable(false);
        jTextPane11.setBorder(null);
        jTextPane11.setText("As encryption is a hashing based on nonlinear functions, there is no decryption method. This means that to retrieve the password corresponding to a sha-1 hash, there is no choice but to try all possible passwords!\nTechnically, this operation would take several thousand years, even on the most powerful computers in the world. However, the list of passwords used in real life is more restricted, and it becomes possible to precalculate the most likely fingerprints.\ndCode uses its word databases (10 million potential passwords) to speed up this processing. However, if the password is rare, or combined with salting, it will probably not be found.");
        jTextPane11.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextPane11.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextPane11.setEnabled(false);
        jTextPane11.setPreferredSize(new java.awt.Dimension(890, 100));
        jTextPane11.setRequestFocusEnabled(false);
        jPanel9.add(jTextPane11);

        jLabel27.setText("Study more about this algoritm:");
        jLabel27.setPreferredSize(new java.awt.Dimension(180, 22));
        jPanel9.add(jLabel27);

        jLabel28.setForeground(new java.awt.Color(0, 153, 255));
        jLabel28.setText("https://www.dcode.fr/sha1-hash");
        jLabel28.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel28.setPreferredSize(new java.awt.Dimension(550, 16));
        jLabel28.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel28MouseClicked(evt);
            }
        });
        jPanel9.add(jLabel28);

        jTextPane9.setEditable(false);
        jTextPane9.setBorder(null);
        jTextPane9.setText("The MD5 is based on non-linear (and sometimes non-reversible) functions, so there is no decryption method.\nHowever, a stupid and brute method, the most basic but also the longest and most costly method, is to test one by one all the possible words in a given dictionary to check if their fingerprint is the matching one.\ndCode uses its databases of words (2 million potential passwords) whose MD5 hash has already been pre-calculated. These tables are called rainbow tables.\nIf a word is not in the dictionary, then the decryption will fail.");
        jTextPane9.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextPane9.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextPane9.setEnabled(false);
        jTextPane9.setPreferredSize(new java.awt.Dimension(890, 85));
        jTextPane9.setRequestFocusEnabled(false);
        jPanel9.add(jTextPane9);

        jPanel8.add(jPanel9);

        aboutSP.setViewportView(jPanel8);

        parent.add(aboutSP, "card2");

        rsaPanel.setPreferredSize(new java.awt.Dimension(1200, 570));

        vigenereTitle1.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        vigenereTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vigenereTitle1.setText("Ký bằng thuật toán RSA");
        vigenereTitle1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        vigenereTitle1.setPreferredSize(new java.awt.Dimension(1000, 50));
        rsaPanel.add(vigenereTitle1);

        jPanel1.setPreferredSize(new java.awt.Dimension(1100, 35));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel29.setText("Độ dài khóa");
        jPanel1.add(jLabel29);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1024", "2048" }));
       
        jPanel1.add(jComboBox1);

        jLabel33.setPreferredSize(new java.awt.Dimension(30, 10));
        jPanel1.add(jLabel33);

        createKeyBtn.setText("Tạo mới key");
        createKeyBtn.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        createKeyBtn.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        createKeyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createKeyBtnActionPerformed(evt);
            }
        });
        jPanel1.add(createKeyBtn);

        exportBillAfterSignBtn.setText("Xuất file chữ ký");
        exportBillAfterSignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBillAfterSignBtnActionPerformed(evt);
            }
        });
        jPanel1.add(exportBillAfterSignBtn);

        rsaPanel.add(jPanel1);

        jPanel11.setPreferredSize(new java.awt.Dimension(1100, 100));
        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        keyLb1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        keyLb1.setText("Public key");
        keyLb1.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel11.add(keyLb1);

        publickeyField.setToolTipText("Copy Public key");
        publickeyField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        publickeyField.setEnabled(false);
        publickeyField.setPreferredSize(new java.awt.Dimension(750, 30));
        publickeyField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publickeyFieldActionPerformed(evt);
            }
        });
        jPanel11.add(publickeyField);

        importPubBtn.setText("Thêm khóa");
        importPubBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importPubBtnActionPerformed(evt);
            }
        });
        jPanel11.add(importPubBtn);

        exportPubBtn.setText("Xuất file .key");
        exportPubBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPubBtnActionPerformed(evt);
            }
        });
        jPanel11.add(exportPubBtn);

        alphabetLb3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        alphabetLb3.setText("Private key");
        alphabetLb3.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel11.add(alphabetLb3);

        privatekeyField.setToolTipText("Copy Private key");
        privatekeyField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        privatekeyField.setEnabled(false);
        privatekeyField.setPreferredSize(new java.awt.Dimension(750, 30));
        privatekeyField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privatekeyFieldActionPerformed(evt);
            }
        });
        jPanel11.add(privatekeyField);

        importPriBtn.setText("Thêm khóa");
        importPriBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importPriBtnActionPerformed(evt);
            }
        });
        jPanel11.add(importPriBtn);

        exportPriBtn.setText("Xuất file .pem");
        exportPriBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPriBtnActionPerformed(evt);
            }
        });
        jPanel11.add(exportPriBtn);

        rsaPanel.add(jPanel11);

        jPanel2.setPreferredSize(new java.awt.Dimension(1100, 400));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 15));

        jLabel30.setText("Đường dẫn của đơn hàng");
        jPanel2.add(jLabel30);

        inputPathField.setPreferredSize(new java.awt.Dimension(750, 30));
        jPanel2.add(inputPathField);

        chooseBillPathBtn.setText("Chọn từ thư mục");
        chooseBillPathBtn.setPreferredSize(new java.awt.Dimension(121, 30));
        chooseBillPathBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseBillPathBtnActionPerformed(evt);
            }
        });
        jPanel2.add(chooseBillPathBtn);

        signBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        signBtn.setText("Tạo \nchữ ký \nsố");
        signBtn.setPreferredSize(new java.awt.Dimension(135, 250));
        signBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signBtnActionPerformed(evt);
            }
        });
        jPanel2.add(signBtn);

        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(900, 250));

        billAfterSignArea.setColumns(20);
        billAfterSignArea.setRows(5);
        billAfterSignArea.setPreferredSize(new java.awt.Dimension(780, 200));
        billAfterSignArea.setLineWrap(true);
        jScrollPane1.setViewportView(billAfterSignArea);

        jPanel2.add(jScrollPane1);

        rsaPanel.add(jPanel2);

        parent.add(rsaPanel, "card3");

        jMenuBar1.setBackground(new java.awt.Color(255, 204, 204));
        jMenuBar1.setBorder(null);

        aboutMenu.setText("Hướng dẫn");
        aboutMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aboutMenuMouseClicked(evt);
            }
        });
      
        jMenuBar1.add(aboutMenu);

        digitalSignatureMenu.setText("Chữ ký số");
        digitalSignatureMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                digitalSignatureMenuMouseClicked(evt);
            }
        });
     
        jMenuBar1.add(digitalSignatureMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(parent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(parent, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
        );

        parent.getAccessibleContext().setAccessibleDescription("");

        pack();
    }                                        

    private void aboutMenuMouseClicked(java.awt.event.MouseEvent evt) {                                       
        this.parent.removeAll();
        this.parent.add(this.aboutSP);
        this.parent.repaint();
        this.parent.revalidate();
    }                                      

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {                                     
        try {
            // TODO add your handling code here:
            Desktop.getDesktop().browse(new URI("https://docs.google.com/document/d/1Y2ITvmS79On7EJEmRA6csEF8zDwarO9AoDGmR_0W8B0/edit?usp=sharing"));
        } catch (URISyntaxException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }                                    

    private void jPanel8MouseClicked(java.awt.event.MouseEvent evt) {                                     
        // TODO add your handling code here:
    }                                    

    private void jLabel13MouseClicked(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            Desktop.getDesktop().browse(new URI("https://www.dcode.fr/affine-cipher"));
        } catch (URISyntaxException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }                                     

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {                                     
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            Desktop.getDesktop().browse(new URI("https://www.dcode.fr/vigenere-cipher"));
        } catch (URISyntaxException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }                                    

    private void jLabel18MouseClicked(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            Desktop.getDesktop().browse(new URI("https://www.dcode.fr/hill-cipher"));
        } catch (URISyntaxException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }                                     

    private void jLabel23MouseClicked(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            Desktop.getDesktop().browse(new URI("https://www.dcode.fr/md5-hash"));
        } catch (URISyntaxException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }                                     

    private void jLabel28MouseClicked(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            Desktop.getDesktop().browse(new URI("https://www.dcode.fr/sha1-hash"));
        } catch (URISyntaxException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }                                     

    private void createKeyBtnActionPerformed(java.awt.event.ActionEvent evt) {                                             
    	try {
			RSA_Algorithm rsa = new RSA_Algorithm(Integer.parseInt((String) this.jComboBox1.getSelectedItem()));
			try (FileOutputStream fos = new FileOutputStream("public.key")) {
				fos.write(rsa.getPublicKey_code().getEncoded());
			}
			try (FileOutputStream fos = new FileOutputStream("private_key.pem")) {
				fos.write(rsa.getPrivateKey_code().getEncoded());
			}
			this.publickeyField.setText(rsa.getPublicKey());
			this.privatekeyField.setText(rsa.getPrivateKey());
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, e.getMessage());
		}
    }                                            

    private void publickeyFieldActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // copy public key
    	this.publickeyField.copy();
    }                                              

    private void privatekeyFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // copy private key
    	this.privatekeyField.copy();
    }                                               

    private void exportPriBtnActionPerformed(java.awt.event.ActionEvent evt) {                                             
    	exportFile(this.privatekeyField, "pem");
    }                                            

    private void signBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
    	try {
			String path = this.inputPathField.getText();
			SHA512_Hashing hash = new SHA512_Hashing();
			RSA_Algorithm rsa = new RSA_Algorithm(Integer.parseInt((String) this.jComboBox1.getSelectedItem()));
			String hashFile = hash.hashFile(path);

			if (this.privatekeyField.getText().contains(File.separator)) {
				this.billAfterSignArea.setText(rsa.encryptString(hashFile, this.privatekeyField.getText()));
			} else {
				this.billAfterSignArea.setText(rsa.encryptString(hashFile, "private_key.pem"));
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, e.getMessage());
		}
    }                                                                                

    private void exportBillAfterSignBtnActionPerformed(java.awt.event.ActionEvent evt) {                                                       
    	exportFile(this.billAfterSignArea, "pdf");
    }                                                      

    private void importPubBtnActionPerformed(java.awt.event.ActionEvent evt) {                                             
    	uploadFile(this.publickeyField, "KEY file", "key");
    }                                            

    private void exportPubBtnActionPerformed(java.awt.event.ActionEvent evt) {                                             
    	exportFile(this.publickeyField, "key");
    }                                            

    private void importPriBtnActionPerformed(java.awt.event.ActionEvent evt) {                                             
    	uploadFile(this.privatekeyField, "PEM file", "pem");
    }                                            

    private void chooseBillPathBtnActionPerformed(java.awt.event.ActionEvent evt) {                                                  
    	uploadFile(this.inputPathField, "text file", "txt");
    }                                                                                                    

    private void digitalSignatureMenuMouseClicked(java.awt.event.MouseEvent evt) {                                                  
        this.parent.removeAll();
        this.parent.add(this.rsaPanel);
        this.parent.repaint();
        this.parent.revalidate();
    }  
    
    public void exportFile(JTextComponent outField, String fileExtension) {
		try {
			JFileChooser fileChooser = new JFileChooser(".");
			fileChooser.setMultiSelectionEnabled(false);
			int x = fileChooser.showDialog(parent, "Save file");

			if (x == JFileChooser.APPROVE_OPTION) {
				File file = new File(fileChooser.getSelectedFile().getAbsolutePath() + "." + fileExtension);
				if (file.exists()) {
					int response = JOptionPane.showConfirmDialog(null, //
							"Do you want to replace the existing file?", //
							"Confirm", JOptionPane.YES_NO_OPTION, //
							JOptionPane.QUESTION_MESSAGE);
					if (response == 0) {
						String text = outField.getText();
						DAO dao = new DAO();
						dao.writeFileTXT(text, file);
					}
				} else {
					boolean createNewFile = file.createNewFile();
					String text = outField.getText();
					DAO dao = new DAO();
					dao.writeFileTXT(text, file);
				}

			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, e.getMessage());
		}
	}

	public void uploadFile(JTextComponent inputField, String descriptionExt, String fileExtension) {
		try {
			JFileChooser fileChooser = new JFileChooser(".");
			FileNameExtensionFilter textFilter = new FileNameExtensionFilter(descriptionExt, fileExtension);
			fileChooser.setFileFilter(textFilter);
			fileChooser.setMultiSelectionEnabled(false);
			int x = fileChooser.showDialog(parent, "Choose a file");

			if (x == JFileChooser.APPROVE_OPTION) {
				File file_path = new File(fileChooser.getSelectedFile().getAbsolutePath());
				inputField.setText(file_path.toString());
			}

		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, e.getMessage());
		}
	}

    // Variables declaration - do not modify                     
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JScrollPane aboutSP;
    private javax.swing.JLabel alphabetLb3;
    private javax.swing.JTextArea billAfterSignArea;
    private javax.swing.JButton chooseBillPathBtn;
    private javax.swing.JButton createKeyBtn;
    private javax.swing.JMenu digitalSignatureMenu;
    private javax.swing.JButton exportBillAfterSignBtn;
    private javax.swing.JButton exportPriBtn;
    private javax.swing.JButton exportPubBtn;
    private javax.swing.JButton importPriBtn;
    private javax.swing.JButton importPubBtn;
    private javax.swing.JTextField inputPathField;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane10;
    private javax.swing.JTextPane jTextPane11;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JTextPane jTextPane4;
    private javax.swing.JTextPane jTextPane5;
    private javax.swing.JTextPane jTextPane6;
    private javax.swing.JTextPane jTextPane7;
    private javax.swing.JTextPane jTextPane8;
    private javax.swing.JTextPane jTextPane9;
    private javax.swing.JLabel keyLb1;
    private javax.swing.JPanel parent;
    private javax.swing.JTextField privatekeyField;
    private javax.swing.JTextField publickeyField;
    private javax.swing.JPanel rsaPanel;
    private javax.swing.JButton signBtn;
    private javax.swing.JLabel vigenereTitle1;
    // End of variables declaration                   
}
